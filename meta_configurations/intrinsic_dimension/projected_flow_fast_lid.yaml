# This sweep compares different fast flow LID estimators for Gaussian projection examples
# These examples include projected samples from a Gaussian or a uniform distribution
project: intrinsic-dimensions
sweep_name: gaussian_projected_examples_fast_lid
entity: platypus-dgm
count: 10000
method: grid

# Change the name of the run to [in_distribution_dataset]_vs_[out_of_distribution_dataset]_[run_name]
# using the dysweep name changer for better readability
run_name_changer:
  expression: |
    from meta_configurations import *
  function_of_interest: intrinsic_dimension_run_name_changer

# BASE configuration which is being used
base_config:
  intrinsic_dimension_estimator:
    method: dimensions.flow_fast_lid.FastFlowLID
    method_args:
      ambient_dim: 800
      flow_model_class: model_zoo.density_estimator.flow.NormalizingFlow
      flow_model_args:
        # Data transform args (they are here because they might influence log_prob)
        flatten: False
        data_shape: [800]

        denoising_sigma: null
        dequantize: False
        scale_data: False
        whitening_transform: False
        logit_transform: False
        clamp_samples: False

        # Base distribution arguments (in this work the base is always Gaussian)
        base_distribution:
          class_path: nflows.distributions.StandardNormal
          init_args:
            shape: [800]
        

        transform:
        - repeat_n: 3
          content:
            - class_path: nflows.transforms.normalization.ActNorm
              init_args:
                features: 800
            - class_path: model_zoo.density_estimator.flow.ConfigurableCouplingTransform
              init_args: 
                coupling_transform_cls: nflows.transforms.AffineCouplingTransform
                net:
                  class_path: nflows.nn.nets.resnet.ResidualNet
                  init_args:
                    hidden_features: 1024
                    num_blocks: 3
                mask:
                  dim: 800
                  flip: True
            
            - class_path: nflows.transforms.normalization.ActNorm
              init_args:
                features: 800
            - class_path: model_zoo.density_estimator.flow.ConfigurableCouplingTransform
              init_args: 
                coupling_transform_cls: nflows.transforms.AffineCouplingTransform
                net:
                  class_path: nflows.nn.nets.resnet.ResidualNet
                  init_args:
                    hidden_features: 1024
                    num_blocks: 3
                mask:
                  dim: 800
                  flip: False
      checkpoint_tag: best_valid
      flow_model_trainer_args:
        trainer_cls: model_zoo.trainers.single_trainer.SingleTrainer
        optimizer:
          class_path: torch.optim.AdamW
          init_args:
            lr: 0.001
        sample_freq: null # logs the samples after every two epochs
        max_epochs: 10
        early_stopping_metric: loss
        max_bad_valid_epochs: 30
        max_grad_norm: 1.0
        progress_bar: True

      verbose: 2
      r: -1
    fitting_args:
      chunk_size: 1
      visualize_eigenspectrum: True
    estimation_args:
      show_trend: True
      left_r: -7.0
      right_r: 7
      radii_n: 100
      visualize_std: True

  writer:
    tag_group: flow
    type: wandb
    entity: platypus-dgm
    project: intrinsic-dimensions

  data:
    dataset: linear_projected
    additional_dataset_args:
      # manifold_dim: ??? (set in sweep)
      ambient_dim: 800
      # projection_type: ??? (set in sweep)
      # The size should be large since the intrinsic dimension is large
      size: 60000
    train_batch_size: 128
    valid_batch_size: 128
    test_batch_size: 8


        
      
      
sweep_configuration:
  data:
    additional_dataset_args:
      projection_type:
        sweep: True
        values:
        - repeat
        - random
      sample_distr:
        sweep: True
        values:
        - normal
        - uniform
      dy__upsert:
        - sweep: True
          sweep_identifier: manifold_dim
          sweep_alias:
          - d125
          - d100
          - d75
          - d50
          - d800
          - d400
          - d200
          - d600
          values:
          - manifold_dim: 125
          - manifold_dim: 100
          - manifold_dim: 75
          - manifold_dim: 50
            # increase the size because of increased sample complexity
          - manifold_dim: 800
          - manifold_dim: 400
          - manifold_dim: 200
          - manifold_dim: 600

    
  dy__upsert:
  - dy__eval:
      expression: |
        from meta_configurations import change_coupling_layers
        def turn_into_rq_nsf(conf):
          return  change_coupling_layers(
                        conf, 
                        'PiecewiseRationalQuadraticCouplingTransform',
                        additional_args = {
                          'tails': 'linear',
                          'num_bins': 8,
                          'tail_bound': 10.0,
                        }
                  )
      function_of_interest: turn_into_rq_nsf