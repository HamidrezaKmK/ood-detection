# Settings from the legacy config
legacy:
  dataset: cifar10
  cfg:
    max_epochs: 250
trainer:
  sample_freq: 5 # logs the samples after every two epochs
  writer:
    type: wandb
    entity: dgm-l6
    project: training-dgms
# Settings from the new configurations
model:
  class_path: model_zoo.density_estimator.flow.NormalizingFlow
  init_args:
    # Data args
    flatten: False
    data_shape: [3, 32, 32]
    denoising_sigma: null
    dequantize: True
    scale_data: False
    whitening_transform: False
    logit_transform: False
    clamp_samples: False
    base_distribution:
      class_path: nflows.distributions.StandardNormal
      init_args:
        shape: [3072]
    transform:
    ######################################################################### 
    ###### First level
    - class_path: nflows.transforms.reshape.SqueezeTransform
      init_args:
        factor: 2 # turns the image into [12, 16, 16]
    - repeat_n: 3
      content:
      - class_path: nflows.transforms.normalization.ActNorm
        init_args:
          features: 12 # Apply activation normalization to all the channels
      - class_path: nflows.transforms.conv.OneByOneConvolution
        init_args: 
          num_channels: 12
      - class_path: model_zoo.density_estimator.flow.RQCouplingTransform
        init_args: 
          net:
            class_path: nflows.nn.nets.resnet.ConvResidualNet
            init_args:
              hidden_channels: 64
              num_blocks: 2
              activation: torch.nn.functional.relu
              dropout_probability: 0.2
              use_batch_norm: False
          mask:
            dim: 12
            flip: True
          tails: linear
          num_bins: 3
          tail_bound: 1.0
      - class_path: nflows.transforms.normalization.ActNorm
        init_args:
          features: 12 # Apply activation normalization to all the channels
      - class_path: nflows.transforms.conv.OneByOneConvolution
        init_args: 
          num_channels: 12
      - class_path: model_zoo.density_estimator.flow.RQCouplingTransform
        init_args: 
          net:
            class_path: nflows.nn.nets.resnet.ConvResidualNet
            init_args:
              hidden_channels: 64
              num_blocks: 2
              activation: torch.nn.functional.relu
              dropout_probability: 0.2
              use_batch_norm: False
          mask:
            dim: 12
            flip: False
          tails: linear
          num_bins: 3
          tail_bound: 1.0
    - class_path: nflows.transforms.conv.OneByOneConvolution
      init_args: 
        num_channels: 12
      multiscale:
        transform_output_shape: [12, 16, 16]
    ###########################################################################
    ##### Second Level
    # squeeze
    - class_path: nflows.transforms.reshape.SqueezeTransform
      init_args:
        factor: 4 # turns the image into [96, 4, 4]
    - repeat_n: 3
      content:
      - class_path: nflows.transforms.normalization.ActNorm
        init_args:
          features: 96 # Apply activation normalization to all the channels
      - class_path: nflows.transforms.conv.OneByOneConvolution
        init_args: 
          num_channels: 96
      - class_path: model_zoo.density_estimator.flow.RQCouplingTransform
        init_args: 
          net:
            class_path: nflows.nn.nets.resnet.ConvResidualNet
            init_args:
              hidden_channels: 128
              num_blocks: 2
              activation: torch.nn.functional.relu
              dropout_probability: 0.2
              use_batch_norm: False
          mask:
            dim: 96
            flip: True
          tails: linear
          num_bins: 2
          tail_bound: 1.0
      - class_path: nflows.transforms.normalization.ActNorm
        init_args:
          features: 96 # Apply activation normalization to all the channels
      - class_path: nflows.transforms.conv.OneByOneConvolution
        init_args: 
          num_channels: 96
      - class_path: model_zoo.density_estimator.flow.RQCouplingTransform
        init_args: 
          net:
            class_path: nflows.nn.nets.resnet.ConvResidualNet
            init_args:
              hidden_channels: 128
              num_blocks: 2
              activation: torch.nn.functional.relu
              dropout_probability: 0.2
              use_batch_norm: False
          mask:
            dim: 96
            flip: False
          tails: linear
          num_bins: 2
          tail_bound: 1.0
    - class_path: nflows.transforms.conv.OneByOneConvolution
      init_args: 
        num_channels: 96
      multiscale:
        transform_output_shape: [96, 4, 4]
    ###########################################################################
    ##### Third Level
    # squeeze
    - class_path: nflows.transforms.reshape.SqueezeTransform
      init_args:
        factor: 2 # turns the image into [192, 2, 2]
    - repeat_n: 3
      content:
      - class_path: nflows.transforms.normalization.ActNorm
        init_args:
          features: 192 # Apply activation normalization to all the channels
      - class_path: model_zoo.density_estimator.flow.RQCouplingTransform
        init_args: 
          net:
            class_path: nflows.nn.nets.resnet.ConvResidualNet
            init_args:
              hidden_channels: 512
              num_blocks: 2
              activation: torch.nn.functional.relu
              dropout_probability: 0.2
              use_batch_norm: False
          mask:
            dim: 192
            flip: True
          tails: linear
          num_bins: 3
          tail_bound: 1.0
      - class_path: nflows.transforms.normalization.ActNorm
        init_args:
          features: 192 # Apply activation normalization to all the channels
      - class_path: model_zoo.density_estimator.flow.RQCouplingTransform
        init_args: 
          net:
            class_path: nflows.nn.nets.resnet.ConvResidualNet
            init_args:
              hidden_channels: 512
              num_blocks: 2
              activation: torch.nn.functional.relu
              dropout_probability: 0.2
              use_batch_norm: False
          mask:
            dim: 192
            flip: False
          tails: linear
          num_bins: 3
          tail_bound: 1.0
    - class_path: nflows.transforms.conv.OneByOneConvolution
      init_args: 
        num_channels: 192
      multiscale:
        transform_output_shape: [192, 2, 2]
    ###########################################################################
    ##### Fourth Level
    # squeeze
    - class_path: nflows.transforms.reshape.SqueezeTransform
      init_args:
        factor: 2 # turns the image into [384, 2, 2]
    - repeat_n: 3
      content:
      - class_path: nflows.transforms.normalization.ActNorm
        init_args:
          features: 384 # Apply activation normalization to all the channels
      - class_path: model_zoo.density_estimator.flow.RQCouplingTransform
        init_args: 
          net:
            class_path: nflows.nn.nets.resnet.ConvResidualNet
            init_args:
              hidden_channels: 512
              num_blocks: 2
              activation: torch.nn.functional.relu
              dropout_probability: 0.2
              use_batch_norm: False
          mask:
            dim: 384
            flip: True
          tails: linear
          num_bins: 3
          tail_bound: 1.0
      - class_path: nflows.transforms.normalization.ActNorm
        init_args:
          features: 384 # Apply activation normalization to all the channels
      - class_path: model_zoo.density_estimator.flow.RQCouplingTransform
        init_args: 
          net:
            class_path: nflows.nn.nets.resnet.ConvResidualNet
            init_args:
              hidden_channels: 512
              num_blocks: 2
              activation: torch.nn.functional.relu
              dropout_probability: 0.2
              use_batch_norm: False
          mask:
            dim: 384
            flip: False
          tails: linear
          num_bins: 3
          tail_bound: 1.0
    - class_path: nflows.transforms.conv.OneByOneConvolution
      init_args: 
        num_channels: 384
      multiscale:
        transform_output_shape: [384, 1, 1]