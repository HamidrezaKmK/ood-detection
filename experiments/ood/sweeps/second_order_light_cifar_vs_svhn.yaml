# This sweep only considers the ignore negative metric on different representation scales
# for the troublesom cifar10-vs-svhn case!

project: 012-analysis-cifar-vs-svhn
entity: dgm-l6
count: 10000

# BASE configuration which is being used
base_config:
  ood:
    pick_single: False
    use_dataloader: True
    seed: 10
    method: ood.methods.second_order.HessianSpectrumMonitor
    method_args:
      progress_bar: True
      data_limit: 15
      # TODO: this should be fixed!
      use_functorch: False
      plot_std: False
      second_order_score_type: ignore_negative
      use_local_optimization: False
  data:
    seed: 10

# The sweep configuration itself
sweep_configuration:
  ood:
    method_args:
      dy__upsert:
        - sweep: True
          sweep_identifier: Z_Cancel_Background
          sweep_alias:
          - cancel
          - no_cancel
          values:
          - cancel_background: True
          - cancel_background: False
        - sweep: True
          sweep_identifier: Z_representation_rank
          sweep_alias:
          - input
          - middle
          - deep
          values:
          - representation_rank: null
          - representation_rank: 25
          - representation_rank: 43
  dy__upsert:
    - sweep: True
      sweep_identifier: B_dataset
      sweep_alias:
        - flow_cifar10
        - flow_svhn
      values:
        - base_model:
            run_dir: runs/flow_cifar10
            config_dir: experiments/training/flow_heavy_cifar10.yaml
            checkpoint_dir: runs/flow_cifar10/checkpoints/de_nf_latest.pt
        - base_model:
            run_dir: runs/flow_svhn
            config_dir: experiments/training/flow_heavy_svhn.yaml
            checkpoint_dir: runs/flow_svhn/checkpoints/de_nf_latest.pt
    - sweep: True
      sweep_identifier: C_ood_or_not
      sweep_alias:
        - ood_for_test
        - in_distr_for_test
      values:
        - data:
            in_distribution:
              dataloader_args:
                dataset:
                  dy__eval:
                    expression: |
                      from pprint import pprint

                      def func(conf):

                        last_part = conf['base_model']['run_dir'].split('_')[-1]
                        if last_part == 'fmnist':
                          return 'fashion-mnist'
                        if last_part == 'cifar10':
                          return 'cifar10'
                        if last_part == 'mnist':
                          return 'mnist'
                        if last_part == 'svhn':
                          return 'svhn'
                    function_of_interest: func
            out_of_distribution:
              dataloader_args:
                dataset:
                  dy__eval:
                    expression: |
                      from pprint import pprint

                      def func(conf):

                        last_part = conf['base_model']['run_dir'].split('_')[-1]
                        if last_part == 'fmnist':
                          return 'mnist'
                        if last_part == 'cifar10':
                          return 'svhn'
                        if last_part == 'mnist':
                          return 'fashion-mnist'
                        if last_part == 'svhn':
                          return 'cifar10'
                    function_of_interest: func
        - data:
            in_distribution:
              dataloader_args:
                dataset:
                  dy__eval:
                    expression: |
                      from pprint import pprint
                      def func(conf):

                        last_part = conf['base_model']['run_dir'].split('_')[-1]
                        if last_part == 'fmnist':
                          return 'fashion-mnist'
                        if last_part == 'cifar10':
                          return 'cifar10'
                        if last_part == 'mnist':
                          return 'mnist'
                        if last_part == 'svhn':
                          return 'svhn'
                    function_of_interest: func
            out_of_distribution:
              dataloader_args:
                dataset:
                  dy__eval:
                    expression: |
                      from pprint import pprint

                      def func(conf):
                        last_part = conf['base_model']['run_dir'].split('_')[-1]
                        if last_part == 'fmnist':
                          return 'fashion-mnist'
                        if last_part == 'cifar10':
                          return 'cifar10'
                        if last_part == 'mnist':
                          return 'mnist'
                        if last_part == 'svhn':
                          return 'svhn'
                    function_of_interest: func